#!/usr/bin/env node

const pkg = require('../package.json');
const program = require('commander');
const markdown = require('../utils/markdown');
const fs = require('fs');
const path = require('path');
const mongo = require('../utils/mongo');

program
  .version(pkg.version)
  .usage('[options] <file/dir>')
  .option('-r,--recursive', 'markdown recursively')
  .option('-p,--progress', 'show progress')
  .option('-e,--encoding <n>', 'set encoding, default = \'utf8\'')
  .option('-mhost,--mongo_host <n>', 'set mongodb host')
  .option('-mport,--mongo_port <n>', 'set mongodb port')
  .option('-mdb,--mongo_database <n>', 'set mongodb database name')
  .option('-mcoll,--mongo_collection <n>', 'set mongodb collection')
  .parse(process.argv);

const isRecursive = program.recursive;
const isProgress = program.progress;
const encoding = program.encoding || 'utf8';
const mongo_host = program['mongo_host'] || 'localhost';
const mongo_port = program['mongo_port'] || 27017;
const mongo_database = program['mongo_database'] || 'niceblog';
const mongo_collection = program['mongo_collection'] || 'article';
const todoQueue = program.args.concat();

mongo.init({host: mongo_host, port: mongo_port, db: mongo_database}, start);

function start() {
  while (todoQueue.length > 0) {
    let file = todoQueue.pop();
    let stats = fs.statSync(file);
    if (stats.isFile() && isMarkdown(file)) {
      handle(file);
    } else if (stats.isDirectory()) {
      if (isRecursive) {
        fs.readdirSync(file).forEach((item) => {
          todoQueue.push(path.join(file, item));
        });
      } else {
        console.log('if you want to handle directory, please input \'-r\' option');
      }
    }
  }
  mongo.close();
}

function handle(file) {
  if (isProgress) {
    console.log('handling', file);
  }
  let markdownString = fs.readFileSync(file, {encoding: encoding});
  let html = markdown.parse(markdownString);
  let content = clearTag(html);
  let summary = content.substring(0, 200);
  let word = content.length;
  let name = path.basename(file, path.extname(file));
  let date = new Date(name.substring(0, 10));
  let title = name.substring(11, name.length);
  mongo.getCollection(mongo_collection).insertOne({
    title: title,
    date: date,
    word: word,
    view: 0,
    like: 0,
    comment: 0,
    labels: ['算法与数据结构'],
    markdown: markdownString,
    html: html,
    summary: summary,
  });
}

function isMarkdown(file) {
  let type = path.extname(file);
  return type == '.md' || type == '.markdown';
}

function clearTag(html) {
  const TAG_REG = /<.*?>/g;
  return html.replace(TAG_REG, '');
}
